{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Update Task\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Tasks component template content goes here \"), _hoisted_1, _createElementVNode(\"ul\", null, [_createCommentVNode(\" container of the task index \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.tasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createTextVNode(_toDisplayString(task.name) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.UpdateTask(index)\n    }, \"Update Task\", 8 /* PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createCommentVNode","_hoisted_1","_Fragment","_renderList","tasks","task","index","key","_createTextVNode","_toDisplayString","name","onClick","$event","$options","UpdateTask","_hoisted_2"],"sources":["C:\\Users\\PC10\\vueplayground\\case_study1\\src\\components\\UpdateTask.vue"],"sourcesContent":["\r\n<template>\r\n    <div>\r\n      <!-- Tasks component template content goes here -->\r\n      <h2>Update Task</h2>\r\n      <ul>\r\n        <!-- container of the task index -->\r\n        <li v-for=\"(task, index) in this.tasks\" :key=\"index\" >{{ task.name }}  \r\n          <button @click=\"UpdateTask(index)\">Update Task</button>\r\n        </li>\r\n\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        tasks: \r\n          this.$tasks\r\n      }; \r\n    },\r\n    //confirmation for deleting task\r\n    methods: {\r\n\r\n        UpdateTask(index){\r\n            let conf = (\"Update Task?\");\r\n            if(conf){\r\n                this.tasks[index].name = prompt(\"Update this task\",this.tasks[index].name);\r\n                \r\n            }\r\n        }\r\n      \r\n    }\r\n  };\r\n  \r\n  </script>\r\n  \r\n  <style>\r\n \r\n  </style>\r\n  "],"mappings":";gCAIMA,mBAAA,CAAoB,YAAhB,aAAW;mBAJrB;;uBAEIC,mBAAA,CAUM,cATJC,mBAAA,gDAAmD,EACnDC,UAAoB,EACpBH,mBAAA,CAMK,aALHE,mBAAA,iCAAoC,G,kBACpCD,mBAAA,CAEKG,SAAA,QATbC,WAAA,MAOyCC,KAAK,EAP9C,CAOoBC,IAAI,EAAEC,KAAK;yBAAvBP,mBAAA,CAEK;MAFoCQ,GAAG,EAAED;IAAK,IAP3DE,gBAAA,CAAAC,gBAAA,CAOiEJ,IAAI,CAACK,IAAI,IAAG,GACnE,iBAAAZ,mBAAA,CAAuD;MAA9Ca,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACR,KAAK;OAAG,aAAW,iBARxDS,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}